[핵심 아이디어]
테트리스의 기본적인 규칙은 다음과 같다.
1. 현재 떨어지는 블록이 없을 경우 블록이 1개 생성되며 생성된 블록은 일정시간마다 1칸씩 아래로 떨어진다.
2. 떨어지는 블록은 상단 방향키를 통해 회전시킬 수 있으며 좌우 방향키로 이동, 하단 방향키로 1칸 하락, 스페이스바를 눌러 즉시 떨어트릴 수 있다.
3. 블록이 바닥 또는 이미 놓여있는 블록에 떨어질 경우 블록은 고정되고, 다른 블록이 생성된다.
4. 가로줄이 모두 블록으로 가득 찬 경우 그 가로줄은 제거되고, 점수를 얻는다.
5. 보드판의 크기는 가로 10, 세로 20이다.
6. 블록이 내려오는 속도는 시간이 지날수록 빨라진다.
 
<기본 셋팅>
1. 보드 판
 1.1. 보드크기 : 10 * 20
 1.2. 실제 보드 배열의 크기
  1.2.1. row : 25 (0~23) (0은 보이지 않기에 빈공간, 1~2는 블록이 생성되기 위한 빈 공간, 3~22는 실제 보드, 23은 바닥)
  1.2.2. column : 12 (0~11) (0은 왼쪽 벽, 1~10은 실제 보드, 11은 오른쪽 벽)
 1.3. 보드 좌표
   x좌표 : 0~4 : hold를 위한 공간 / 5 : 왼쪽 벽 / 6~15 : 보드 / 16 : 오른쪽 벽 / 17~21 : next를 위한 공간
   y좌표 : 0 : 빈공간 / 1~2 : 블록이 생성되는 공간 / 3~22 : 실제 보드 및 next, hold가 존재하는 공간 / 23 : 바닥
 
2. 블록 배열 (시계방향 회전순서) (모든 블록은 [1][1]을 중심 좌표로 한다.)(4*4배열에 저장한다. 3*3으로 표시하여 4*4에 비해 부족한 부분들은 전부 0으로 채운다.)
 2.1. Z미노 (빨간색) (코드 1)
 	1 2 0	0 0 1	0 0 0	0 4 0
	0 3 4	0 3 2	4 3 0	2 3 0
	0 0 0	0 4 0	0 2 1	1 0 0
 2.2. L미노 (주황색) (코드 2)
	0 0 4	0 1 0	0 0 0	4 3 0
	1 2 3	0 2 0	3 2 1	0 2 0
	0 0 0	0 3 4	4 0 0	0 1 0
 2.3. O미노 (노란색) (코드 3)
	0 1 4	나머지 모두 같다.
	0 2 3
	0 0 0
 2.4. S미노 (초록색) (코드 4)
	0 2 1	0 4 0	0 0 0	1 0 0
	4 3 0	0 3 2	0 3 4	2 3 0
	0 0 0	0 0 1	1 2 0	0 4 0
 2.5. J미노 (파란색) (코드 5)
	4 0 0	0 3 4	0 0 0	0 1 0
	3 2 1	0 2 0	1 2 3	0 2 0
	0 0 0	0 1 0	0 0 4	4 3 0
 2.6. T미노 (보라색) (코드 6)
	0 4 0	0 3 0	0 0 0	0 1 0
	3 2 1	0 2 4	1 2 3	4 2 0
	0 0 0	0 1 0	0 4 0	0 3 0
 2.7. I미노 (하늘색) (코드 7)
	0 0 0 0	0 0 1 0	0 0 0 0	0 4 0 0
	1 2 3 4	0 0 2 0	0 0 0 0	0 3 0 0
	0 0 0 0	0 0 3 0	4 3 2 1	0 2 0 0
	0 0 0 0	0 0 4 0	0 0 0 0	0 1 0 0
 
<블록 생성 및 하락>
1. 블록생성
 1.1. 현재 활성화 된 블록이 없을 경우 즉, 현재 플레이어 조작중인 블록이 없을 경우 보드 중앙 상단에 블록이 생성된다.
 1.2. 블록의 생성 위치는 블록의 블록의 중앙 (즉, 3x3 배열의 [1][1])이 상하로 22번째 칸, 왼쪽에서 5번째칸([1][5])이 오게 생성된다.
      (단, I미노 블록은 왼쪽에서 4, 5, 6, 7번째에 형성된다.) (실제 게임에서 보이는 보드는 10*20이지만 프로그램 안에선 더 크게 잡는다.)
 1.3. 7bag를 통해 최대 13번 안에 같은 블록이 2번이상 나오도록 한다.
 1.4. next를 위해 미리 7bag에서 블록을 뽑아놔 next블록 5개를 정해두고, next에 있는 블록을 생성하도록 한다.
 1.5. hold를 사용하여 hold안에 있는 블록을 소환할 때는 next에 있는 블록을 소진하지 않도록 한다.
 
2.블록 낙하
 2.1. 블록이 생성되면 블록의 좌표를 배열에 따로 저장한다.
 2.2. 일정 시간이 지나면 저장된 블록의 좌표들을 +1 시킨다.
  2.2.1. 일정 시간은 시간함수를 이용한다.
 2.3. 단, 저장된 블록 좌표 바로 밑이 0이 아닐 경우, 낙하는 종료되고 새로운 블록을 형성한다.
 
<키보드 입력을 통한 회전 제어>
1. 키보드 입력
 1.1. 프로그램을 while문으로 계속 돌려 게임이 계속 진행되게 함과 동시에 kbhit()함수가 1이 될때 conio.h에 있는 getch를 이용하여 입력을 받는다.
2. 키셋팅
 2.1. <, > : 현재 블록을 좌우로 움직이기
 2.2. spacebar : 하드드롭 (바로 떨어트리기)
 2.3. z, ctrl : 반시계 (왼쪽 회전)
 2.4. x, ↑ : 시계 (오른쪽 회전)
 2.5.↓ : 소프트드롭 (아래로 한칸)
3. 회전 제어
 3.1. 회전과 관련된 키 입력을 받았을 때, 실행하게 된다.
 3.2. 회전을 하면 회전 인덱스 값을 변화시켜서 블록들의 좌표가 다시 업데이트 되도록 한다. 
      이 때 z회전은 인덱스가 감소하는 방향, x회전은 인덱스가 증가하는 방향으로 한다.
 3.3. 회전을 하기 전에, 미리 해당좌표에 블록 혹은 벽이 있는지 확인해야 한다.
 
<실시간 화면 출력>
1. 기본 화면

□□hold□□                          □□next□□
□    ■    □                          □	       □
□ ■■■  □                          □	       □
□□□□□□                          □---------□
	 □                          □	       □
             □                          □	       □
             □                          □---------□
             □                          □	       □
             □                          □	       □
             □                          □---------□
             □                          □	       □
             □                          □	       □
             □                          □---------□
             □                          □	       □
             □                          □	       □
             □                          □□□□□□
             □                          □
             □                          □
             □                          □
             □                          □
             □		      □
             □□□□□□□□□□□□
2. 화면의 변화
 2.1. 블록을 출력하는 경우에는 goto_xy를 통해 커서를 움직인 후 (사각형의 사이즈가 2이므로 x좌표는 2배를 한다.)
      블록 코드에 맞는 블록을 출력하도록 한다.
 2.2. 블록을 한번에 움직이게 하기 위해 미리 블록이 움직이도록 시뮬레이션 한 뒤, 최종 모양을 출력하는 형태로 한다.

<보드판 관리>

[세부 함수 내용]
-메인함수-
1.settingBoard()를 실행한다.
2.while(1)을 통해 다음을 반복한다.
 2.1. playing = updateGame()을 실행한다.
 2.2. playing = 0인 경우 반복을 종료한다.

-int updateGame()-
1. createBlock()를 실행한다.
2. fallingBlock()를 실행한다.
last. return 0;

-void settingBoard-
1. board[0, 21][0~11] / board[0~21][0, 11]의 값을 -1로 설정한다.
2. board[0~21][0~11]까지 printBoard(board[row][column])을 통해 출력한다.
3. settingBlock()
4. gameStartTime = clock(), criteriaTime = clock();

-void printBoard(int blockCode, int x, int y)-
1.사각형의 크기가 2*1사이즈이므로 x*=2를 한다.
2.goto_xy(x, y)
3. blockCode 값에 따라 다음과 같이 출력한다.
 1.1. -1인 경우 □ 출력
 1.2. 0인 경우 "  " 출력 (빈칸 2칸)
 1.3. 나머지 경우 ■ 출력
 
-void goto_xy(int x, int y)-
1. HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE) 선언
2. COORD pos 선언(커서 위치)
3. pos.X = x / pos.Y = y (커서 위치 설정)
4. SetConsoleCursorPosition(handle, pos) (커서 위치 지정)

-void createBlock(int code)-
0. blockExistence가 1인 경우 return 한다.
1. code값에 따라 blockCode를 설정한다.
 1.1. code == 0인 경우 (새로운 블록을 생성하는 경우) blockCode = importNext()에서 next블록 코드값을 가져온다.
 1.2. code != 0인 경우 (hold에 있는 블록이나 특정 블록을 생성하는 경우) blockCode = code
2. 정해진 위치에 블록을 생성한다.
 2.1. 테트로미노 블록들이 생성되는 좌표의 board값을 blockCode로 수정해준다.
 2.2. blockQueue에 생성되는 테트로미노 블록들의 x, y, code값을 저장한다.
 2.3. 블록의 x, y좌표에 printBoard를 통해 생성되는 블록을 출력한다.
3. blockExistence = 1로 하고 blockRot = 0으로 함으로써 블록 생성을 마친다.

-void settingBlock()-
모든 미노의 블록 모양을 설정한다. (2번 항목 참고)

-void fallingBlock()-
0. blockExistence가 0인 경우 return 한다.
1. 자동 낙하 시간이 된 경우 즉, nowTime - fallingCriteriaTime (현재시간 - 딜레이시작시간) >= fallingDelayTime(자동 낙하 시간)
   인 경우
 1.1. fallingCriteriaTime = clock()을 통해 딜레이 시작 시간을 초기화해준다.
 1.2. softDrop()을 실행하여 블록을 1칸 낙하시킨다.

-void softDrop()-
1. blockMoveSimulation을 통해 블록을 1칸 떨어트리는 시뮬레이션을 해본다.
 1.1. 만약, 1칸 떨어지는게 불가능한 상황이라면 landBlock을 통해 블록을 착지시킨다.
 1.2. 1칸 떨어지는게 가능한 상황이라면 reloadBlock을 통해 블록 위치를 갱신한다.

-int blockMoveSimulation(block blockQueue[4], int moveX, int moveY)
1. moveX값에 따라 다음을 실행한다.
 1.1. moveX값이 0인 경우 다음 과정으로 넘어간다.
 1.2. moveX값이 0이 아닌 경우
  1.2.1. i = 0~3 으로 반복한다.
  1.2.2. board[blockQueue[i].x + moveX][y]값을 확인하여 해당 x좌표 움직임이 가능한지 확인한다.
   1.2.2.1. 값이 0 혹은 blockQueue[i].code인 경우 즉, 빈공간이거나 같은 블록인 경우 다음 과정으로 넘어간다.
   1.2.2.2. 그렇지 않은 경우 즉, 움직임이 불가능한 경우 return 0을 해준다.
  1.2.3. 블록이 움직일 수 있으므로 inputPreloadBlockQueue를 통해 블록이 움직인 후 값을 저장한다.
2. moveY값에 따라 1번 과정과 같은 과정을 y좌표를 대상으로 실행한다.
3. return 1; (움직임 가능)

-void landBlock(block blockQUeue[4], int decreaseY)-
1.현재 조작중이던 블록의 코드값을 +7한채로(이미 설치된 블록코드값은 기존 블록코드 +7이다.) inputPreloadBlockQueue에 저장한다.
2.line[현재 y값]을 1로 해줌으로써 해당 line에 영향을 미쳤음을 표시해준다.
3.reloadBlock()으로 갱신해주고 blockExistence를 0으로 함으로써 현재 조작중인 블록이 없다고 저장한다.
4.line을 돌면서 현재 영향을 준 라인에 checkLine을 함으로써 라인이 완성됐는지 확인한다.

-void checkLine(int line)-
1. line <= 1인 경우 즉, 천장 이상인 라인에 블록이 영향을 준 경우 playing = 0을 통해 게임을 종료
2. board[line][1~10]값을 확인한다.
 2.1. 하나라도 0이 있는 경우 라인이 완성이 안됐기 때문에 함수를 종료한다.
3. board[line][1~10]을 0으로 만들어 기존 라인의 보드값을 제거하고 printBoard를 통해 화면에서 지운다.
4. board[line-1 ~ 0][1~10]값을 y+1로 즉, 한칸 밑으로 내림으로써 라인 위에있는 모든 블록을 밑으로 내리고 printBoard를 통해 역시 밑으로 내린다.
5. clearLine++를 통해 라인을 하나 더 지웠음을 저장한다.

-void hardDrop()-
1. blockMoveSimulation을 통해 낙하되는 지점을 찾는다.
2. 해당 좌표를 찾은 경우 landBlock을 통해 블록을 착지 시킨다.

-void inputPreloadBlockQueue(int index, int code, int x, int y)
1. preloadBlockQueue[index]에 code, x, y값을 저장해준다.
 > 조작중인 블록의 다음 움직임을 따로 저장한다.

-void reloadBlock()
1. i = 0~3으로 반복해준다.
2. board[blockQueue[i].x][blockQueue[i].y] = 0으로 기존 블록의 board값을 0(빈공간)으로 수정해준다.
3. printBoard(0, blockQueue.x, blockQueue.y);으로 기존 블록을 화면에서 지운다.
4. 다시 i = 0~3으로 반복해준다.
5. board[preloadBlockQueue[i].x][preloadBlockQueue[i].y] = preloadBlockQueue[i].code;을 통해 블록이 변화한 후 좌표를 board에 저장한다.
6. blockQueue[i] = preloadBlockQueue[i]를 통해 blockQueue에 블록 변화 후 값을 저장한다.
7. printBoard(blockQueue.code, blockQueue.x, blockQueue.y);를 통해 블록이 변화한 후 상태를 화면에 출력한다.

-void createBag()
1. bag7배열에 초기 값을 넣어준다. (1~7)
2. 0번째 인덱스부터 모든 인덱스를 돌면서 랜덤한 다른 배열값과 자리를 바꿔준다. (자리 섞기)

-int importNext()
1. 바로 다음 next블록을 nextBlock에 저장한다.
2. nextFrontIndex++, nextRearIndex++를 통해 원형 큐를 돌려준다. (next변수는 원형큐 구조이다.)
3. next[(nextRearIndex % 5)] (큐의 마지막) 값을 bag7[bagIndex]에서 뽑아온 뒤 (bagIndex : 7bag에서 뽑을 다음 블록이 있는 인덱스)
   bagIndex++를 통해 bag7 스택을 순환시켜준다.
 3.1. 만약 bagIndex가 6보다 큰 경우 (bag7에 있는 모든 블록을 소진한 경우) createBag를 통해 7bag를 생성해준다.
4. 현재 next를 시각적으로 보여주기 위해 next값을 다시 출력한다.
 4.1. 기존에 블록들이 있던 자리를 모두 지워준다. ((y-3) % 3이 0이 아닌 자리)
 4.2. 그 후 블록들이 있던 자리에 새로운 next블록들을 출력한다.
5. nextBlock을 리턴함으로써 다음 next블록을 리턴해준다.

-void hold()-
1. 기존 hold값을 originValue에 저장한다.
2. 원래 조작중이던 블록 값을 holdValue에 저장한다.
3. hold칸을 출력하던 곳을 지운다.
4. 현재 hold중인 블록을 hold칸에 출력한다.
5. reloadBlock을 통해 기존 조작중이던 블록이 삭제됐음을 알리고 blockExistence = 0을 통해 블록이 삭제됐음을 알린다.
6. createBlock(originValue)를 통해 기존에 저장하던 블록이 없으면 새 블록을, 아닐 경우 저장중이던 블록을 생성한다.

-int blockRotationSimulation(block blockQueue[4], int rotDir)
 >>회전 개선 때 갱신
 

