오늘은 DAS를 마저 개발하는 쪽으로 방향을 잡아보자
일단 오늘 떠오른 방법으로 DAS를 해결해보자
(부등식 부등호 바꾸기)

부등호 방향을 바꿨더니 됐따!

이제 왼쪽도 똑같이 해주자
그냥 !GetAsyncKeyState로 moveDelayTime을 회복하니
왼쪽을 눌러도 오른쪽 방향키를 안눌러서 ARR이 안된다.
입력을 떼는 조건문에 keycode = 1도 추가하자

제법 그럴듯하다

아랫방향키는 moveDelayTime을 ARR의 2배로 잡자

이정도면 조작개선은 훌륭하다!

이제 고스트에 대해서 수정을 해야하는데..
음...........;;
고스트 지울 때 print를 해보자
아니, 기존에 createBlock에 있던 shadowPos를 0으로 만드는 구문을 제거해보자

..훌륭하게 버그가 고쳐졌다.

오늘 개발 폼이 너무좋은데.. 개발을 조금 늦게 시작한 것이 후회된다.
SRS구현에 들어가기엔 너무 짧은 시간.. 일단 플레이해보면서 고칠 버그가 있는지
테스트해보자
버그도 안보인다.. 2분 20초가 나올 정도로 많이 개선됐다는 것이 느껴진다.
그러면 많은 SRS중에 월킥만 구현해보자.
월킥만 구현해도, 원래 테트리스랑 크게 다른점이 없을 것이다!

기존 회전에서는 블록 하나하나를 다음 회전 모양으로 바꾼 뒤
이 모양이 주변 블록이나 벽에 부딪히는지를 따졌었다.
따라서, 모양을 바꿀 때 부딪히는 블록의 x좌표가 -1이면 오른쪽으로 한칸 이동
+1이면 왼쪽으로 한칸이동해서 다시 시뮬레이션 하는 식으로 해보면 어떨까

한번 해보자!
일단, 기존 blockRotationSimulation에서 return 0이 되던 부분을
X < 0인 경우 kick ++, X > 0인 경우 kick = ++을 해보자
그리고 기존 board값을 확인하는 구문 x좌표에 + kick을 해보자
그런 뒤, 한번 더 시뮬레이션을 돌렸을 때도 불가능할때
즉, 기존조건문 && kick!=0일때는 return을 하도록 해보자
 > X<0, X>0조건문에서 kick > 0일 경우 return0 / kick < 0일 경우 return 0
을 통해 2칸이상의 킥도 가능하게 하자

월킥에 성공했다! 다만, 킥을통한 T스핀은 왜 불가능한지 의문이다.
오늘은 여기까지 충분히 만족!