호국끝나고 돌아왔다!

이제는 기존에 개발한 테트리스의 완성도를 높이는 방향으로 진행하자
일단, 플레이 해보면서 개선해야 할 점들을 한번 브레인스토밍식으로 적어보자
 - hold, next
 - 7bag
 - 조작의 불편함(keydown 구현 필수)
 - 블록 색깔 추가
 - 정교한 DAS 구현 (키보드 누르고 있기)
 - 고스트의 추가
 - SRS
  > 스핀의 구현
  > 벽에 붙어있을 경우 블록의 회전 (킥)
 - 인피니티(바닥에 있어도 블록을 조작하는 동안 고정되지 않는 것)
 - 시간, 현재 라인갯수의 가독성 추가

이정도가 현재 눈에 보이는 개선할 점들이다.

긴급하고 중요한 것들을 위주로 우선순위를 정해보자면 다음과 같다.
1. 7bag
2. hold, next
3. 고스트 추가
4. 조작 개선 (연속 입력 방지)
5. SRS
6. DAS
7. 인피니티
8. 가독성 증가

그러면 하나씩 처리해나가자

일단 먼저 해야할 것은 bag7이다.
bag7를 만든다음 1~7를 무작위 순서로 입력한 후 블록이 필요할 때
queue에서 빼는 방향으로 진행한다.
nextQueue와 같이 만들어서 다음 next구현을 쉽게 만들어보자

중요한 것은 1~7를 중복되지 않게 무작위로 넣는 알고리즘인데 어떻게 구현해야 할까
검색한 후 shuffle 즉, 배열 원소의 순서를 무작위로 섞는 알고리즘을 하기로 했다.

createBag()함수를 통해 bag를 생성하도록 하고
bag7[0]~[6]을 초기화해준 후
0~6을 돌면서 rand()%7로 뽑은 원소랑 교환하는 알고리즘을 쳬택한다.

그 후 nextQueue에서 bag7원소를 뽑게 하고 bag7원소를 모두 사용할 때 마다
createBag()를 하게 하자 

bag와 동시에 next를 구현했다.

그러면, 다음은 hold를 구현하자.
hold라는 변수를 만든 뒤 c를 누르면 블록 코드를 저장하게 하고
c를 누를때마다 블록을 없앤 후 createBlock을 하면 된다.
hold인지 아닌지를 구별하기 위해
createBlock에 int code 매개변수를 추가하고
0이면 랜덤으로 하자.

hold()함수를 구현하고
0~3을 돌면서
inputPreloadBlockQueue(i, 0, X, Y)를 한 뒤
reloadBlock()
createBlock(holdValue)를 하면 된다.

hold 구현도 성공했다.

다음개발 때 hold, next를 시각적으로 보여주는 것을 추가하면 될 듯 하다.