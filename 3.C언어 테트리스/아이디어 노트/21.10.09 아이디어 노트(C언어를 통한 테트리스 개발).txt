일단 먼저 회전에 대해서 해봅시다!

일상생활을 하면서 생각해본게 있는데
일단 기존에 블록을 저장하던 방식을 바꾸면 좋을거같아요
현재는 4*4배열을 만들어둔 뒤
배열에 블록 모양을 저장하는 방식이었는데
어차피 현재 블록 이동이나 설치에서 굳이 4*4배열이 안쓰이니까
특정 좌표를 중심으로 좌표만 저장해도 될듯하더라구요
지금도 어차피 (1,1)을 중심으로 해당 x,y좌표가 활성화 되어있냐를 보니까
그냥 좌표를 저장하자는거죠
예를들어

1 1 0
0 1 1  이렇게 저장하던 것을 (1,1)을 중심으로
0 0 0

[1] : -1, 1
[2] : 0, 1      이런식으로 말이죠
[3] : 0, 0
[4] : 1, 0

그러면 회전을 구현할때도 블록 하나하나를 다음 회전모양으로 이동시키면
쉽게 구현할 수 있을거 같구요

바로 바꿔봅시다

tetromino변수를 int에서 block으로 바꿀 수 있으니 1석 2조네요

회전을 위해서 블록순서도 신경써서 저장했습니다

ex)
1 2 0
0 3 4
0 0 0

이제 회전을 구현합시다

회전은 z, x버튼을 통해서 제어합니다.
일단 현재 회전상태를 기억하는 변수 하나를 만듭시다.
blockRot로 합시다.

z : blockRot = (blockRot + 4 - 1) % 4
x : blockRot = (blockRot + 4 + 1) % 4

이렇게 blockRot변수를 바꿔서 회전을합시다.

그 다음 회전 시뮬레이션을 돌려야하는데...

회전 시뮬레이션 함수 하나를 만들면 좋겠죠?
int blockRotationSimulation(block blockQueue[4], int rotDir)로 합시다.
z를 누르면 rotDir 를 -1로
x를 누르면 rotDir 를 1로 하면 될거같구요

회전은 for문을 통해 1번 블록부터
tetromino[blockCode][(blockRot + 4 + rotDir) % 4][i] - tetromino[blockCode][blockRot][i]
를 x, y좌표에 대입해서 moveSimulation처럼 시뮬레이션 돌리면 될 듯 하네요
바로가죠!

놀랍게도 블록 회전은 성공했따!

근데 왜 블록 설치할때 마다 다른 블록 출력이 바뀌는 버그가 있는지 모르겠다..

일단 srand함수에 대해 확실히 알아보고 무작위성을 더욱 강화해보자

srand함수를 time(NULL)뿐만 아니라 clock()를 더함으로써 ms단위로 무작위성을 강화했다.
그런데 seed값은 프로그램 시작할때만 정하면 되는거 아닌감.. 한번 실험해볼까
문제없이 잘되네.. 괜히 시간 투자했다

그러면 이제 블록 설치시 다른 칸의 입력에 관여하는 버그를 생각해보자
빈칸으로 보여도 블록인식은 정상으로 하는 것을 보니
출력에만 문제가 있어보인다.
출력에 관여하는 코드들을 살펴보자

일단 블록설치를 중심으로 살펴보자